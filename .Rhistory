tmp
?gsub
features
tmp <- gsub("\\(", "", features[, 2])
tmp
tmp <- gsub("\\(", ".", features[, 2])
tmp
make.names("angle.X,gravityMean)")
features <- read.table(unz(temp,"UCI HAR Dataset/features.txt"), stringsAsFactors = FALSE)
for (i in 1:length(features[,2])) {  # Make column names syntactically valid
validNames[i] <- make.names(features[i,2])
}
colnames(mergedData) <- c("Subject", "Activity_Label", validNames)
features <- read.table(unz(temp,"UCI HAR Dataset/features.txt"), stringsAsFactors = FALSE)
validNames <- vector()
for (i in 1:length(features[,2])) {  # Make column names syntactically valid
validNames[i] <- make.names(features[i,2])
}
colnames(mergedData) <- c("Subject", "Activity_Label", validNames)
names(mergedData)
toMatch <- c("mean\\(\\)", "std\\(\\)")
toMatch
toMatch <- c("mean\\.", "std\\.")
matchedIndexes <- grep(paste(toMatch, collapse="|"), names(mergedData))
matchedIndexes
length(matchedIndexes)
data <- read.table("finalData.txt", header = TRUE)
str(data)
str(finalData)
head(data)
newColNames
newColNames <- colnames(mergedData)[c(1, 2, matchedIndexes)]
newColNames
colnames(mergedData) <- c("Subject", "Activity.Label", validNames)
# Get indexes of columns containing "mean" strictly or "std"
toMatch <- c("mean\\.", "std\\.")
matchedIndexes <- grep(paste(toMatch, collapse="|"), names(mergedData))
# Subset the data to keep Subject, Activity Label, and measurements
subsetData <- mergedData[, c(1, 2, matchedIndexes)]
# Get new column names
newColNames <- colnames(mergedData)[c(1, 2, matchedIndexes)]
newColNames
write.table(newColNames, "startofcodebook.md")
?write.table
write.table(newColNames, "startofcodebook.md", row.names = FALSE)
write.table(newColNames, "startofcodebook.md", quote = FALSE, row.names = FALSE)
tmp <- gsub("...", ".", newColNames)
tmp
tmp <- gsub("\\.\\.\\.", ".", newColNames)
tmp
newColNames <- gsub("\\.\\.\\.", ".", newColNames)
newColNames <- gsub("\\.\\.", ".", newColNames)
newColNames
write.table(newColNames, "startofcodebook.md", quote = FALSE, row.names = FALSE)
newColNames
newColNames <- gsub("BodyBody", "Body", newColNames)
newColNames
write.table(newColNames, "startofcodebook.md", quote = FALSE, row.names = FALSE)
newColNames[3]
c("Mean.of.",newColNames[3])
c("Mean.of.", newColNames[3], sep = "")
?c
?con
?concatenate
??concatenate
paste("Mean.of.", newColNames[3], sep = " ")
paste("Mean.of.", newColNames[3], sep = "")
for (i in 3:length(newColnames)) {  # Assign correct column names
newColNames[i] <- paste("Mean.of.", newColNames[i], sep = "")
}
for (i in 3:length(newColNames)) {  # Assign correct column names
newColNames[i] <- paste("Mean.of.", newColNames[i], sep = "")
}
newColNames
write.table(newColNames, "startofcodebook.md", quote = FALSE, row.names = FALSE)
write.table(newColNames, "CodebookVariables.md", quote = FALSE, row.names = FALSE)
for (i in 3:length(newColNames)) {  # Assign correct column names
newColNames[i] <- paste("Average.of.", newColNames[i], sep = "")
}
newColNames
newColNames <- colnames(mergedData)[c(1, 2, matchedIndexes)]
# Clean up column names
newColNames <- gsub("\\.\\.\\.", ".", newColNames)
newColNames <- gsub("\\.\\.", ".", newColNames)
newColNames <- gsub("BodyBody", "Body", newColNames)
newColNames
for (i in 3:length(newColNames)) {  # Assign correct column names
newColNames[i] <- paste("Average.of.", newColNames[i], sep = "")
}
newColNames
dim(finalData)
write.table(newColNames, "variablesForCodebook.md", quote = FALSE, row.names = FALSE)
finalData[2,3]
class(finalData[2,3])
features <- read.table(unz(temp,"UCI HAR Dataset/features.txt"), stringsAsFactors = FALSE)
features
features[,2]
featuresNoParentheses <- gsub("\\(\\)", "", features[,2])
featuresNoParentheses
featuresNoParentheses <- gsub("\\(\\)|-", "", features[,2])
featuresNoParentheses
featuresNoParentheses <- gsub("\\(\\)", "", features[,2])
features[,2]
featuresNoParentheses
tmp <- gsub("\\-|\\.", "", featuresNoParentheses)
tmp
tmp <- gsub("\\-|\\,", ".", featuresNoParentheses)
tmp
colnames(mergedData) <- c("Subject", "Activity", tmp)
toMatch <- c("mean\\.", "std\\.")
matchedIndexes <- grep(paste(toMatch, collapse="|"), names(mergedData))
matchedIndexes
length(matchedIndexes)
features <- read.table(unz(temp,"UCI HAR Dataset/features.txt"),
stringsAsFactors = FALSE)
# Replace parentheses and parentheses/hyphens with periods
featuresNoParentheses <- gsub("\\(\\)|\\(\\)\\-", ".", features[,2])
# Replace hypen and commas with periods
validNames <- gsub("\\-|\\,", ".", featuresNoParentheses)
colnames(mergedData) <- c("Subject", "Activity", validNames)
toMatch <- c("mean\\.", "std\\.")
matchedIndexes <- grep(paste(toMatch, collapse="|"), names(mergedData))
validNames
head(finalData)
head(subsetData)
subsetData[1:50,1]
subsetData[1:100,1]
subsetData[1:300,1]
subsetData[1:600,1]
finalData[600,1:2]
finalData[1,1]
finalData[1:10,1]
finalData[1:30,1]
for(i in unique(subsetData$Subject)) { print(i)}
for(i in order(unique(subsetData$Subject)) { print(i)}
for(i in order(unique(subsetData$Subject))) { print(i)}
?order
unique(subsetData$Subject)
order(unique(subsetData$Subject))
class(unique(subsetData$Subject))
order(c(3,6,4))
sort(c(3,6,4))
sort(unique(subsetData$Subject))
for(i in sort(unique(subsetData$Subject))) { print(i)}
str(finalData)
unique(finalData$Activity_Label)
source("run_analysis.R")
?unz
View(trainComplete)
?download.file
?unz
close()
testSubject <- read.table(unz(temp,"UCI HAR Dataset/test/subject_test.txt"))
close()
isOpen()
isOpen
isOpen(con)
?download.file
?unz
> testSubject <- read.table(unz(con, temp, "UCI HAR Dataset/test/subject_test.txt"))
testSubject <- read.table(unz(con, temp, "UCI HAR Dataset/test/subject_test.txt"))
con <- unz(temp,"UCI HAR Dataset/train/X_train.txt")
trainData <- read.table(con)
close(con)
source("run_analysis.R")
?write.table
write.table(finalData, file = "finalData.txt", row.names = FALSE)
close("finalData.txt")
warnings()
file <- "variablesForCodebook.md"
write.table(newColNames, file, quote = FALSE, row.names = FALSE)
close(file)
source("run_analysis.R")
address <- "https://s3.amazonaws.com/coursera-uploads/user-76af0276f98fef0e3fc0c4aa/973502/asst-3/96b966f0186311e5a68e31fd4ca20b5c.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
address <- "https://s3.amazonaws.com/coursera-uploads/user-76af0276f98fef0e3fc0c4aa/973502/asst-3/96b966f0186311e5a68e31fd4ca20b5c.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
?aggregate
address <- "https://github.com/kmok23/TidyDataProject/blob/master/finalData.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
address <- "https://github.com/kmok23/TidyDataProject/blob/master/finalData.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
address <- "https://s3.amazonaws.com/coursera-uploads/user-5455789b13b504fe88a8303c/973502/asst-3/bb15fb5016e511e5a817b3e6b4b67549.txt"
address <- sub("^https", "http", address)
data <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data)
address <- "https://s3.amazonaws.com/coursera-uploads/user-76af0276f98fef0e3fc0c4aa/973502/asst-3/96b966f0186311e5a68e31fd4ca20b5c.txt"
address <- sub("^https", "http", address)
data2 <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data2)
address <- "https://s3.amazonaws.com/coursera-uploads/user-eb17f2e9ff5c1899179cf72e/973502/asst-3/56f9fc80184211e58b0bb5b9d1fbb292.txt"
address <- sub("^https", "http", address)
data2 <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data2)
address <- "https://s3.amazonaws.com/coursera-uploads/user-364282dd22f0663923fc428a/973502/asst-3/827a87f0184011e5aaf6f51a37ac2dba.txt"
address <- sub("^https", "http", address)
data2 <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data2)
address <- "https://s3.amazonaws.com/coursera-uploads/user-55be6dfbbee86dcea8afd7fa/973502/asst-3/bf7b2e10184111e5b9b5ebe7ca3183f4.txt"
address <- sub("^https", "http", address)
data2 <- read.table(url(address), header = TRUE) #if they used some other way of saving the file than a default write.table, this step will be different
View(data2)
setwd("~/R/datasciencecoursera")
source("quiz4getdata.R")
head(data)
?strsplit
names(data)
strsplit(data)
strsplit(data, "wgtp")
strsplit(names(data), "wgtp")
datanames <- strsplit(names(data), "wgtp")
datanames[123]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
temporaryfile <- tempfile()
download.file(url, temporaryfile)
data <- read.csv(temporaryfile)
head(data)
data <- read.csv(temporaryfile, skip = 2)
head(data)
data <- read.csv(temporaryfile, skip = 3)
head(data)
data <- read.csv(temporaryfile, skip = 4)
head(data)
data$X.4[1]
nocommas <- sub(",", "", data$X.4[1])
nocommas
nocommas <- gsub(",", "", data$X.4[1])
nocommas
nocommas <- gsub(",", "", data$X.4)
no commas
nocommas
mean(nocommas)
?mean
mean(nocommas, na.rm = TRUE)
class(nocommas)
nocommas <- as.numeric(gsub(",", "", data$X.4))
?as.numeric
?read.csv
?as.numeric
as.numeric(data$X.4)
data$X.4
data <- read.csv(temporaryfile, skip = 4, na.rm = TRUE)
data <- read.csv(temporaryfile, skip = 4)
nocommas <- as.numeric(gsub(",", "", data$X.4))
mean(nocommas)
mean(nocommas,na.rm = TRUE)
sum(data$X.4[1:190], data$X.4[217], data$X.4[219:231])
sum(nocommas[1:190], nocommas[217], nocommas[219:231])
296556885/203
as.numeric(data$X.4)
head(data)
data$X.4[1]
as.numeric(levels(data$X.4))[data$X.4]
levels(data$X.4)
levels(data$X.4)[data$X.4]
length(data$X.4)
as.numeric(levels(data$X.4)[data$X.4])
as.numeric(gsub(",", "", levels(data$X.4)[data$X.4]))
mean(as.numeric(gsub(",", "", levels(data$X.4)[data$X.4])))
data <- read.csv(temporaryfile, skip = 4, stringsAsFactors = FALSE)
head(data)
class(data$X.4)
nocommas <- as.numeric(gsub(",", "", data$X.4))
gsub(",", "", data$X.4)
as.numeric(data$X.4[326])
as.numeric(gsub(",", "", data$X.4[326])
)
as.numeric(gsub(",", "", data$X.4))
head(data, 200)
?mean
mean(as.numeric(gsub(",", "", data$X.4)), na.rm = TRUE)
tail(data)
data <- read.csv(temporaryfile, skip = 4, nrows = 236, stringsAsFactors = FALSE)
head(data)
tail(data)
data <- read.csv(temporaryfile, skip = 4, nrows = 231, stringsAsFactors = FALSE)
tail(data)
as.numeric(gsub(",", "", data$X.4))
data$X.4
nocommas <- gsub(",", "", data$X.4)
nocommas
?is.numeric
is.numeric(nocommas)
as.numeric(nocommas)
mean(nocommas)
mean(as.numeric(nocommas))
mean(as.numeric(nocommas), na.rm=TRUE)
mean(na.omit((as.numeric(nocommas), na.rm=TRUE)))
mean(na.omit((as.numeric(nocommas))))
view(data)
View(data)
View(data)
data <- read.csv(temporaryfile, skip = 4, nrows = 191, stringsAsFactors = FALSE)
View(data)
data <- read.csv(temporaryfile, skip = 4, nrows = 190, stringsAsFactors = FALSE)
View(data)
nocommas <- gsub(",", "", data$X.4)
mean(nocommas)
mean(as.numeric(nocommas))
mean(as.numeric(nocommas))
data
grep("^United", data$X.3)
?grep
grep("^United", data$X.3)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
temporaryfile <- tempfile()
download.file(url, temporaryfile)
GDPdata <- read.csv(temporaryfile, skip = 4, nrows = 190)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
temporaryfile <- tempfile()
download.file(url, temporaryfile)
EDUdata <- read.csv(temporaryfile)
mergedData <- merge(GDPdata, EDUdata, by.x = "X", by.y = "CountryCode")
View(mergedData)
View(GDPdata)
View(EDUdata)
mergedData$Special.Notes
grep("Fiscal year end: June", mergedData$Special.Notes)
length(grep("Fiscal year end: June", mergedData$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(sampleTimes)
grep("2012", sampleTimes)
length(grep("2012", sampleTimes))
as.Date(sampleTimes)
weekdays(as.Date(sampleTimes))
cbind(sampleTimes, weekdays(as.Date(sampleTimes)))
?strftime
strftime(sampleTimes)
strftime(sampleTimes, %A)
strftime(sampleTimes, "%A")
strftime(sampleTimes, "%A%x")
strftime(sampleTimes, "%x %A")
grep("2012 Monday", strftime(sampleTimes, "%x %A"))
length(grep("2012 Monday", strftime(sampleTimes, "%x %A")))
getwd()
setwd("/R/ExData_Plotting1")
setwd(..)
setwd("..")
setwd("~/R/ExData_Plotting1")
data <- read.table("exdata-data-household_power_consumption/household_power_consumption")
data <- read.table("exdata-data-household_power_consumption/household_power_consumption.txt")
head(data)
loc <- "exdata-data-household_power_consumption/household_power_consumption.txt"
data <- read.table(loc , stringsAsFactors = FALSE, sep = ";")
head(data)
?read.table
data <- read.table(loc, header = TRUE, stringsAsFactors = FALSE, sep = ";")
head(data)
str(data)
?strptime
temp <- strptime(data[,1], "%Y-%m-%d"")
temp <- strptime(data[,1], "%Y-%m-%d")
head(temp)
head(data[,1])
strptime(data[1,1])
temp <- strptime(data[1,1], "%Y-%m-%d")
strptime(data[1,1], "%Y-%m-%d")
data[1,1]
strptime(data[1,1], "%d/%m/%Y")
temp <- strptime(data[,1], "%d/%m/%Y")
head(temp)
data[,1] <- strptime(data[,1], "%d/%m/%Y")
head(data)
data[1,1]
data <- read.table(loc, header = TRUE, stringsAsFactors = FALSE, sep = ";")
head(data)
strptime(data[1,1], "%d/%m/%Y")
head(data)
subdata <- data[which(data$Date =='01/02/2007' | data$Date =='02/02/2007')]
head(subdata)
str(subdata)
subdata <- data[which(data$Date =='01/02/2007' | data$Date =='02/02/2007'), ]
head(subdata)
str(subdata)
subdata <- data[which(data$Date =='01/02/2007'), ]
str(subdata)
head(data)
subdata <- data[which(data$Date == "01/02/2007"), ]
str(subdata)
subdata <- data[which(data$Date == "1/2/2007"), ]
str(subdata)
subdata <- data[which(data$Date == "1/2/2007" | data$Date == "2/2/2007"), ]
str(subdata)
?as.Date
as.Date(data[1,1])
data[1,1]
subdata[1,1]
as.Date(subdata[1,1], "%d/%m/%Y")
temp <- as.Date(subdata[,1], "%d/%m/%Y")
head(temp)
subdata[,1] <- as.Date(subdata[,1], "%d/%m/%Y")
head(subdata)
str(subdata)
head(data)
?strptime
strptime(subdata[1,2], "%H:%M:%S")
temp <- strptime(subdata[,2], "%H:%M:%S")
subdata[,2] <- strptime(subdata[,2], "%H:%M:%S")
temp <- strptime(subdata[,2], "%H:%M:%S")
head(temp)
head(subdata)
subdata <- data[which(data$Date == "1/2/2007" | data$Date == "2/2/2007"), ]
head(subdata)
temp <- strptime(subdata[,2], "%H:%M:%S")
head(temp)
temp[1,]
temp[1]
temp[1,2]
class(temp)
strptime(c(subdata[1,1], subdata[1,2]))
c(subdata[1,1], subdata[1,2])
temp <- paste(subdata$Date, subdata$Time, sep = "")
head(temp)
temp <- paste(subdata$Date, subdata$Time, sep = " ")
head(temp)
temp <- strptime(paste(subdata$Date, subdata$Time, sep = " "), "%d/%m/%Y %H:%M:%S")
head(temp)
subdata$DateTime <- temp
head(subdata)
hist(subdata$Global_active_power)
str(subdata)
?read.table
loc <- "exdata-data-household_power_consumption/household_power_consumption.txt"
data <- read.table(loc, header = TRUE, colClasses = (character, character,
numeric, numeric, numeric, numeric, numeric),
stringsAsFactors = FALSE, sep = ";")
subdata <- data[which(data$Date == "1/2/2007" | data$Date == "2/2/2007"), ]
## subdata[,1] <- as.Date(subdata[,1], "%d/%m/%Y")
tmp <- strptime(paste(subdata$Date, subdata$Time, sep = " "), "%d/%m/%Y %H:%M:%S")
subdata$DateTime <- tmp
hist(subdata$Global_active_power)
data <- read.table(loc, header = TRUE, colClasses = c("character", "character",
"numeric", "numeric", "numeric", "numeric", "numeric"),
stringsAsFactors = FALSE, sep = ";")
loc <- "exdata-data-household_power_consumption/household_power_consumption.txt"
data <- read.table(loc, header = TRUE, colClasses = c("character", "character",
"numeric", "numeric", "numeric", "numeric", "numeric"),
stringsAsFactors = FALSE, sep = ";")
data <- read.table(loc, header = TRUE, colClasses = c("character", "character",
"numeric", "numeric", "numeric", "numeric", "numeric",
"numeric", "numeric"), stringsAsFactors = FALSE, sep = ";")
head(subdata)
scan(loc,sep=';',what="character",nlines=1)
scan(loc,sep=';',what="character",nlines=1)
scan(loc,sep=';',what="character",nlines=2)
class(scan(loc,sep=';',what="character",nlines=2))
rep("character", 9)
data <- read.table(loc, header = TRUE, colClasses = rep("character", 9), stringsAsFactors = FALSE, sep = ";")
cdata <- read.table(loc, header = TRUE, colClasses = c(rep("character", 8),
"numeric"), stringsAsFactors = FALSE, sep = ";")
data <- read.table(loc, header = TRUE, colClasses = c(rep("character", 8),
"numeric"), stringsAsFactors = FALSE, sep = ";")
data <- read.table(loc, header = TRUE, colClasses = c(rep("character", 8),
"numeric"), stringsAsFactors = FALSE, sep = ";")data <- read.table(loc, header = TRUE, colClasses = c(rep("character", 7),
rep("numeric",2)), stringsAsFactors = FALSE, sep = ";")
data <- read.table(loc, header = TRUE, colClasses = c(rep("character", 7),
rep("numeric",2)), stringsAsFactors = FALSE, sep = ";")
head(data)
unique(data$Sub_metering_2)
unique(data$Global_active_power)
hist(subdata$Global_active_power)
subdata$Global_active_power <- as.numeric(subdata$Global_active_power)
str(subdata)
hist(subdata$Global_active_power)
?hist
hist(subdata$Global_active_power, col = "red", main = Global Active Power)
hist(subdata$Global_active_power, col = "red", main = "Global Active Power")
hist(subdata$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
png("plot1.png", width = 500, height = 500, units = "px")
hist(subdata$Global_active_power, col = "red", main = "Global Active Power",
xlab = "Global Active Power (kilowatts)")
dev.off()
setwd("~/")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = .~factor(Month))
str(airquality)
data(airquality)
str(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
file.edit('~/.Rprofile')
getwd()
setwd("~/R/RepData_PeerAssessment2")
